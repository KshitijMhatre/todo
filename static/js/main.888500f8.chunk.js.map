{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","todos","setTodos","todo","setTodo","useEffect","get","then","ob","console","log","remove","e","stopPropagation","num","Number","parseInt","target","getAttribute","newTodos","slice","set","className","src","logo","alt","action","style","display","type","onChange","value","onClick","task","done","map","i","key","checked","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.888500f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {set,get } from 'idb-keyval';\n \n\nfunction App() {\n  \n  const [todos,setTodos] = useState([]);\n  const [todo,setTodo] = useState('');\n  \n  useEffect(()=>{\n    \n    get('todos').then((ob)=>{\n      console.log('setting todo',ob);\n      setTodos(ob||[])\n    })\n\n    // return ()=>{\n    //   set('todos',todos)\n    // }\n\n  },[])\n\n  let handleChange= (e)=>{\n    setTodo(e.target.value)\n  }\n\n  let addTodo = ()=>{\n    if(!todo)\n      return;\n    let newTodos = [\n      ...todos,\n      { task : todo ,done : false}\n    ]\n    setTodos(newTodos)\n    set('todos',newTodos)\n    setTodo('')\n  }\n\n  let remove = (e)=>{\n    e.stopPropagation();\n    let num = Number.parseInt(e.target.getAttribute('num'))\n    let newTodos = [\n      ...todos.slice(0,num),\n      ...todos.slice(num+1),\n    ]\n    setTodos(newTodos);\n    set('todos',newTodos)\n  }\n\n  let todoChecked = (e)=>{\n    let num =  Number.parseInt(e.target.getAttribute('num'))\n    \n    let newTodos = [\n      ...todos.slice(0,num),\n      ...[{...todos[num],done : !todos[num].done}],\n      ...todos.slice(num+1),\n    ];\n    setTodos(newTodos)\n    set('todos',newTodos)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n        <form action='#' className=\"todo\">\n          <input style={{display:'inline-box'}} type='text' onChange={handleChange} value={todo}></input>\n          <button type='submit' onClick={addTodo}>&#x271A; todo</button>\n        </form>\n\n        <ul onClick={todoChecked}>\n          {todos.map((todo,i)=>\n            <li key={i} num={i} className=\"todo\">\n              <input type='checkbox' num={i} checked={todo.done}/> <p num={i}>{todo.task}</p>\n              <i num={i} onClick={remove}>&#x2718;</i>\n            </li>\n          )}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374      \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {          \n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {          \n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {      \n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}