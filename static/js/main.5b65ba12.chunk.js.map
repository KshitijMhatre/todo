{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","todos","setTodos","todo","setTodo","useEffect","remove","e","stopPropagation","num","Number","parseInt","target","getAttribute","newTodos","slice","className","src","logo","alt","action","style","display","type","onChange","value","onClick","task","done","map","i","key","checked","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","alert","catch","error","JSON","stringify","output","document","createElement","body","appendChild","oldLog","items","apply","this","forEach","item","innerHTML","join","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b65ba12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React , {useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import {set,get } from 'idb-keyval';\n \n\nfunction App() {\n  \n  const [todos,setTodos] = useState([]);\n  const [todo,setTodo] = useState('');\n  \n  useEffect(()=>{\n    \n    // get('todos').then((ob)=>{\n    //   console.log('setting todo',ob);\n    //   setTodos(ob||[])\n    // })\n\n    // return ()=>{\n    //   set('todos',todos)\n    // }\n\n  },[])\n\n  let handleChange= (e)=>{\n    setTodo(e.target.value)\n  }\n\n  let addTodo = ()=>{\n    let newTodos = [\n      ...todos,\n      { task : todo ,done : false}\n    ]\n    setTodos(newTodos)\n    // set('todos',newTodos)\n    setTodo('')\n  }\n\n  let remove = (e)=>{\n    e.stopPropagation();\n    let num = Number.parseInt(e.target.getAttribute('num'))\n    let newTodos = [\n      ...todos.slice(0,num),\n      ...todos.slice(num+1),\n    ]\n    setTodos(newTodos);\n    // set('todos',newTodos)\n  }\n\n  let todoChecked = (e)=>{\n    let num =  Number.parseInt(e.target.getAttribute('num'))\n    \n    let newTodos = [\n      ...todos.slice(0,num),\n      ...[{...todos[num],done : !todos[num].done}],\n      ...todos.slice(num+1),\n    ];\n    setTodos(newTodos)\n    // set('todos',newTodos)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n        <form action='#' className=\"todo\">\n          <input style={{display:'inline-box'}} type='text' onChange={handleChange} value={todo}></input>\n          <button type='submit' onClick={addTodo}>&#x271A; todo</button>\n        </form>\n\n        <ul onClick={todoChecked}>\n          {todos.map((todo,i)=>\n            <li key={i} num={i} className=\"todo\">\n              <input type='checkbox' num={i} checked={todo.done}/> <p num={i}>{todo.task}</p>\n              <i num={i} onClick={remove}>&#x2718;</i>\n            </li>\n          )}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      alert('different origin returning');\n          console.log(\n            'different origin returning'\n          );\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          alert('ready worke');\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          alert('null worke');\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      alert('errror'+JSON.stringify(error));\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n\nvar output = document.createElement('pre');\ndocument.body.appendChild(output);\n\n// Reference to native method(s)\nvar oldLog = console.log;\n\nconsole.log = function( ...items ) {\n\n    // Call native method first\n    oldLog.apply(this,items);\n\n    // Use JSON to transform objects, all others display normally\n    items.forEach( (item,i)=>{\n        items[i] = (typeof item === 'object' ? JSON.stringify(item,null,4) : item);\n    });\n    output.innerHTML += items.join(' ') + '<br />';\n\n};\n\n// // You could even allow Javascript input...\n// function consoleInput( data ) {\n//     // Print it to console as typed\n//     console.log( data + '<br />' );\n//     try {\n//         console.log( eval( data ) );\n//     } catch (e) {\n//         console.log( e.stack );\n//     }\n// }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}